---
#Checking .ssh directory present in both namenodes and datanodes
- name: Checking .ssh directory present or not
  stat: path=/home/{{ ha_user }}/.ssh
  register: ssh

#If .ssh directory not present, creating the directory in both namenode and datanode
- name: Creating .ssh directory if not present
  file:
    path: /home/{{ ha_user }}/.ssh
    state: directory
    owner: "{{ ha_user }}"
    group: "{{ ha_group }}"
    mode: 0700
  when: ssh.stat.exists == False

#Checking authorized_keys file present in both namenode and datanode
- name: Checking authorized_keys file present or not
  stat: path=/home/{{ ha_user }}/.ssh/authorized_keys
  register: auth

#If authorized_keys file not present, creating in both namenode and datanodes
- name: Creating authorized_keys file if not present
  file: 
    dest: /home/{{ ha_user }}/.ssh/authorized_keys
    state: touch
    owner: "{{ ha_user }}"
    group: "{{ ha_group }}"
    mode: 0600
  when: auth.stat.exists == False

#Checking old private key are present or not
- name: Checking private key present with same name or not
  stat: path=/home/{{ ha_user }}/.ssh/{{ ha_keyfile }}
  register: rsa
#Checking old public key present or not
- name: Checking public key presnet with same name or not
  stat: path=/home/{{ ha_group }}/.ssh/{{ ha_keyfile }}.pub
  register: pub

#Delting old private key
- name: Deleting old private key
  file:
    dest: "/home/{{ ha_user }}/.ssh/{{ ha_keyfile }}"
    state: absent
  when: rsa.stat.exists

#Deleting old public key
- name: Deleting old public key
  file:
    dest: "/home/{{ ha_user }}/.ssh/{{ item }}"
    state: absent
  with_items: 
    - nn1
    - nn2
  when: rsa.stat.exists

#Creating ssh key with user module
- name: Creating ssh key in all servers
  user: 
    name: "{{ ha_user }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
    
#Adding private key of namenode to namenode's authorized_keys
- name: Adding keyfile to authorized_keys in namenode
  shell: "cat /home/{{ ha_user }}/.ssh/{{ ha_keyfile }} >> /home/{{ ha_user }}/.ssh/authorized_keys"
  when: inventory_hostname in groups[namenode_group]

#Downloading public key from namenode1 server to ansible server
- name: Renaming keyname in namenode-1
  command: "mv /home/{{ ha_user }}/.ssh/{{ ha_keyfile }}.pub /home/{{ ha_user }}/.ssh/nn1"
  when: ansible_fqdn == ha_namenode1

- name: Downloading public key of namenode-1 to ansible server
  fetch: 
    src: /home/{{ ha_user }}/.ssh/nn1
    dest: "{{ ha_keylocation }}/nn1"
    flat: yes
  when: ansible_fqdn == ha_namenode1

#Downloading public key from namenode2 server to ansible server
- name: Renaming keyname in namenode-2
  command: "mv /home/{{ ha_user }}/.ssh/{{ ha_keyfile }}.pub /home/{{ ha_user }}/.ssh/nn2"
  when: ansible_fqdn == ha_namenode2

- name: Downloading public key of namenode-2 to ansible server
  fetch:
    src: /home/{{ ha_user }}/.ssh/nn2
    dest: "{{ ha_keylocation }}/nn2"
    flat: yes
  when: ansible_fqdn == ha_namenode2


#Copying public key to all datanodes
- name: Copying keyfiles to all datanodes and namemnodes
  copy:
    src: "{{ ha_keylocation }}/{{ item }}"
    dest: "/home/{{ ha_user }}/.ssh"
    owner: "{{ ha_user }}"
    group: "{{ ha_group }}"
    mode: 0600
  with_items:
    - nn1
    - nn2

#Adding public key to all servers
- name: Adding keyfile to servers authorized_keys file
  shell: "cat /home/{{ ha_user }}/.ssh/{{ item }} >> /home/{{ ha_user }}/.ssh/authorized_keys"
  with_items:
    - nn1
    - nn2
