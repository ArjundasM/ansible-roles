---
#Creating .ssh directory if not present
- name: Creating .ssh directory if not present
  file:
    path: /home/{{ ha_user }}/.ssh
    state: directory
    owner: "{{ ha_user }}"
    group: "{{ ha_group }}"
    mode: 0700
#Creating authorized_keys file if not present
- name: Creating authorized_keys file if not present
  file: 
    dest: /home/{{ ha_user }}/.ssh/authorized_keys
    state: touch
    owner: "{{ ha_user }}"
    group: "{{ ha_group }}"
    mode: 0600

#Deleting old private and public  key with same name
- name: Deleting old private key
  file:
    dest: "/home/{{ ha_user }}/.ssh/{{ ha_keyfile }}"
    state: absent
- name: Deleting old public key
  file:
    dest: "/home/{{ ha_user }}/.ssh/{{ item }}"
    state: absent
  with_items: 
    - nn1
    - nn2

#Creating new ssh key in all servers
- name: Creating ssh key in all servers
  user: 
    name: "{{ ha_user }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa

#Adding private key to authorized_keys file in all namenodes    
- name: Adding keyfile to authorized_keys in namenode
  shell: "cat /home/{{ ha_user }}/.ssh/{{ ha_keyfile }} >> /home/{{ ha_user }}/.ssh/authorized_keys"
  when: inventory_hostname in groups[namenode_group]
- name: Renaming keyname in namenode-1
  command: "mv /home/{{ ha_user }}/.ssh/{{ ha_keyfile }}.pub /home/{{ ha_user }}/.ssh/nn1"
  when: ansible_fqdn == ha_namenode1

#Downloading public keys from both namenode servers
- name: Downloading public key of namenode-1 to ansible server
  fetch: 
    src: /home/{{ ha_user }}/.ssh/nn1
    dest: "{{ ha_keylocation }}/nn1"
    flat: yes
  when: ansible_fqdn == ha_namenode1

- name: Renaming keyname in namenode-2
  command: "mv /home/{{ ha_user }}/.ssh/{{ ha_keyfile }}.pub /home/{{ ha_user }}/.ssh/nn2"
  when: ansible_fqdn == ha_namenode2

- name: Downloading public key of namenode-2 to ansible server
  fetch:
    src: /home/{{ ha_user }}/.ssh/nn2
    dest: "{{ ha_keylocation }}/nn2"
    flat: yes
  when: ansible_fqdn == ha_namenode2

#Copying keyfile to all datanode servers
- name: Copying keyfiles to all datanodes and namemnodes
  copy:
    src: "{{ ha_keylocation }}/{{ item }}"
    dest: "/home/{{ ha_user }}/.ssh"
    owner: "{{ ha_user }}"
    group: "{{ ha_group }}"
    mode: 0600
  with_items:
    - nn1
    - nn2

#Adding keyfile to all servers authorized_keys file
- name: Adding keyfile to servers authorized_keys file
  shell: "cat /home/{{ ha_user }}/.ssh/{{ item }} >> /home/{{ ha_user }}/.ssh/authorized_keys"
  with_items:
    - nn1
    - nn2
